git版本控制工具(https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)
一、git，githup
    ① git是版本控制工具，GitHup是开源仓库，它为开源项目免费提供git存储。
二、集中式vs分布式
    ① CVS及SVN都是集中式的版本控制系统，而Git是分布式版本控制系统
    ② 集中式和分布式版本控制系统有什么区别呢？
        (1)集中式版本控制系统，版本库是集中存放在中央服务器的，集中式版本控制系统最大的毛病就是必须联网才能工作
        (2)分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库,这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上,实际使用分布式版本控制系统的时候,分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。
三、创建版本库
    ① 什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”
    ② 创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录，通过git init命令把这个目录变成Git可以管理的仓库：瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。
四、时光机穿梭、版本回退
    ① git add 把文件添加到仓库 例如：git add readme.txt (git分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库,实际工作中有一台电脑充当'中央服务器')
    ② git commit -m "wrote a readme file" 把文件提交到仓库，并注释干了什么 注意一定得是双引号
        为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
        前面讲了把文件往Git版本库里添加的时候，是分两步执行的：
        第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
        第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
    ③ git status 
        git status命令可以让我们时刻掌握仓库当前的状态(英文状态下按Q退出)
    ④ git diff(英文状态下按Q退出)
        git diff顾名思义就是查看difference
    ⑤ git log (英文状态下按Q退出)
        命令显示从最近到最远的提交日志，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
        需要友情提示的是，你看到的一大串类似3628164...882e1e0的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。
    ⑥ git reset --hard "HEAD^" 回退到上一个版本 (^是cmd.exe的escape字符，属于特殊字符，命令里要用到文字 ^ 时必须用双引号把它夹起来)
        首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
        版本退到旧版本想再回到新版本怎么办？办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个原先的commit id版本号，于是就可以指定回到未来的某个版本：版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了
    ⑦ $ git reset --hard 3628164(最后一个是版本号，回到原先本班，见上一步说明)
        Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，git仅仅是改变HEAD指针的指向
    ⑧ git relog 用来记录你的每一次命令
        现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？
        在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：
五 工作区和暂存区
    ① 工作区（Working Directory）
        就是你在电脑里能看到的目录，比如我的git_version_control文件夹就是一个工作区：
    ② 版本库（Repository）
        工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
        Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。(图：https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0)
        前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
        第一步是用git add把文件添加进去，实际上就是把工作区文件修改添加到暂存区；
        第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
        因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
        你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
六、管理修改 
    Git管理的是修改，而不是文件，每次修改，如果不add到暂存区，那就不会加入到commit中。
七、撤销修改
    git checkout -- file可以丢弃工作区的修改
    这里有两种情况：
    一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
    一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
    总之，就是让这个文件回到最近一次git commit或git add时的状态。注意回到最近一次git commit或git add时的状态，记住这一句话就行(也就是说checkout会从暂存区或者版本库中检出)
    那修改了内容提交到了暂存区怎么办：命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区(其实就是让暂存区的内容重新回到工作区，不要被撤销暂存区的修改这句话误导，并不能撤销内容的修改),然后在丢弃工作区的修改 git checkout -- readme.txt
    现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？我们后面会讲到远程版本库，一旦你把“stupid boss”提交推送到远程版本库，你就真的惨了……

    小结
    场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

    场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

    场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
八、删除文件
    ① del test.txt(删除本地文件，这里就是工作区的文件，这不是git的命令，而是windows系统的命令，linux系统rm test.txt)
        Git知道你删除了文件，因此，工作区和版本库就不一致了，git status命令会立刻告诉你哪些文件被删除了：
        现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
        git rm test.txt   git commit 
        现在，文件就从版本库中被删除了。
        另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：git checkout -- test.txt(注意--和test.txt间有空格)
        git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
九、远程仓库
    ① Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。
    实际情况往往是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。
    ② 你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
        第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：$ ssh-keygen -t rsa -C "zwhtemail@163.com"
        一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。
        如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
        第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
        为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
        当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
        最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。
        如果你不想让别人看到Git库，有两个办法，一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）。另一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的。这个方法我们后面会讲到的，相当简单，公司内部开发必备。
十、添加远程库
    现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。
    ① 首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
    ② 现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：git remote add origin git@github.com:disappearTime/mygitrepository.git
    添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
    ② 下一步，就可以把本地库的所有内容推送到远程库上：git push -u origin master
    把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
    由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令(git push)。
    推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：
    从现在起，只要本地作了提交，就可以通过命令：git push origin master
    ④ SSH警告：
        ① 当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
        The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
        RSA key fingerprint is xx.xx.xx.xx.xx.
        Are you sure you want to continue connecting (yes/no)?
        这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
    ⑤ 小结：
        要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

        关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

        此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
十一、从远程库克隆
    上次我们讲了先有本地库，后有远程库的时候，如何关联远程库。
    现在，假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。
    ① 首先，登陆GitHub，创建一个新的仓库，名字叫gitskills：
      我们勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件
    ② 现在，远程库已经准备好了，下一步是用命令git clone克隆一个本地库：git clone git@github.com:disappearTime/gitskills.git
    ③ 你也许还注意到，GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
    使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。
    ④ 要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
    Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快
十二、分支管理
    (1) 创建与合并分支(廖雪峰git教程有图解)
        ① 首先创建dev分支，然后切换到dev分支
            git checkout -b dev
           git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：git branch dev  git checkout dev
        ② 然后，使用git branch命令查看当前分支：git branch
            git branch命令会列出所有分支，当前分支前面会标一个*号。
        ③ dev分支工作完成后，切换回master分支：
            git checkout master
        ④ 切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变，现在，我们把dev分支的工作成果合并到master分支上：git merge dev
        git merge命令用于合并指定分支到当前分支。合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。
        注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。
        当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。
        合并完成后，就可以放心地删除dev分支了：git branch -d dev
        ⑤ 小结
        Git鼓励大量使用分支：

        查看分支：git branch

        创建分支：git branch <name>

        切换分支：git checkout <name>

        创建+切换分支：git checkout -b <name>

        合并某分支到当前分支：git merge <name>

        删除分支：git branch -d <name>
    (2) 解决冲突
