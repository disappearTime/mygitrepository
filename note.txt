git版本控制工具(https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)
一、git，githup
    ① git是版本控制工具，GitHup是开源仓库，它为开源项目免费提供git存储。
二、集中式vs分布式
    ① CVS及SVN都是集中式的版本控制系统，而Git是分布式版本控制系统
    ② 集中式和分布式版本控制系统有什么区别呢？
        (1)集中式版本控制系统，版本库是集中存放在中央服务器的，集中式版本控制系统最大的毛病就是必须联网才能工作
        (2)分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库,这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上,实际使用分布式版本控制系统的时候,分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。
三、创建版本库
    ① 什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”
    ② 创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录，通过git init命令把这个目录变成Git可以管理的仓库：瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。
四、时光机穿梭、版本回退
    ① git add 把文件添加到仓库 例如：git add readme.txt (git分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库,实际工作中有一台电脑充当'中央服务器')
    ② git commit -m "wrote a readme file" 把文件提交到仓库，并注释干了什么 注意一定得是双引号
        为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
        前面讲了把文件往Git版本库里添加的时候，是分两步执行的：
        第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
        第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
    ③ git status 
        git status命令可以让我们时刻掌握仓库当前的状态(英文状态下按Q退出)
    ④ git diff(英文状态下按Q退出)
        git diff顾名思义就是查看difference
    ⑤ git log (英文状态下按Q退出)
        命令显示从最近到最远的提交日志，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
        需要友情提示的是，你看到的一大串类似3628164...882e1e0的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。
    ⑥ git reset --hard "HEAD^" 回退到上一个版本 (^是cmd.exe的escape字符，属于特殊字符，命令里要用到文字 ^ 时必须用双引号把它夹起来)
        首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
        版本退到旧版本想再回到新版本怎么办？办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个原先的commit id版本号，于是就可以指定回到未来的某个版本：版本号没必要写全，前几位就可以了，Git会自动去找。当然也不能只写前一两位，因为Git可能会找到多个版本号，就无法确定是哪一个了
    ⑦ $ git reset --hard 3628164(最后一个是版本号，回到原先本班，见上一步说明)
        Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，git仅仅是改变HEAD指针的指向
    ⑧ git relog 用来记录你的每一次命令
        现在，你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？
        在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：
五 工作区和暂存区
    ① 工作区（Working Directory）
        就是你在电脑里能看到的目录，比如我的git_version_control文件夹就是一个工作区：
    ② 版本库（Repository）
        工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
        Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。(图：https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0)
        前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
        第一步是用git add把文件添加进去，实际上就是把工作区文件修改添加到暂存区；
        第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
        因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。
        你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。
六、管理修改 
    Git管理的是修改，而不是文件，每次修改，如果不add到暂存区，那就不会加入到commit中。
七、撤销修改
    git checkout -- file可以丢弃工作区的修改
    这里有两种情况：
    一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
    一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
    总之，就是让这个文件回到最近一次git commit或git add时的状态。注意回到最近一次git commit或git add时的状态，记住这一句话就行
    那修改了内容提交到了暂存区怎么办：命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区(其实就是让暂存区的内容重新回到工作区，不要被撤销暂存区的修改这句话误导，并不能撤销内容的修改),然后在丢弃工作区的修改 git checkout -- readme.txt
    现在，假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本。不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。还记得Git是分布式版本控制系统吗？我们后面会讲到远程版本库，一旦你把“stupid boss”提交推送到远程版本库，你就真的惨了……

    小结
    场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

    场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

    场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
八、删除文件
    ① git rm test.txt